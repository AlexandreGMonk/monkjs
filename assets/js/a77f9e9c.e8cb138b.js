"use strict";(self.webpackChunkmonk_website=self.webpackChunkmonk_website||[]).push([[298],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=s(a),c=i,h=d["".concat(p,".").concat(c)]||d[c]||g[c]||l;return a?n.createElement(h,o(o({ref:t},m),{},{components:a})):n.createElement(h,o({ref:t},m))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,o=new Array(l);o[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3847:(e,t,a)=>{a.r(t),a.d(t,{frontMatter:()=>r,contentTitle:()=>p,metadata:()=>s,toc:()=>m,default:()=>d});var n=a(7462),i=a(3366),l=(a(7294),a(3905)),o=["components"],r={id:"damage-highlight",title:"DamageHighlight",slug:"/js/api/components/damage-highlight"},p=void 0,s={unversionedId:"js/api/components/damage-highlight",id:"js/api/components/damage-highlight",title:"DamageHighlight",description:"Polygons on a vehicle picture.",source:"@site/docs/js/api/components/DamageHighlight.md",sourceDirName:"js/api/components",slug:"/js/api/components/damage-highlight",permalink:"/monkjs/docs/js/api/components/damage-highlight",tags:[],version:"current",frontMatter:{id:"damage-highlight",title:"DamageHighlight",slug:"/js/api/components/damage-highlight"},sidebar:"docsSidebar",previous:{title:"Capture",permalink:"/monkjs/docs/js/api/components/capture"},next:{title:"DamageAnnotation",permalink:"/monkjs/docs/js/api/components/damage-annotation"}},m=[{value:"image",id:"image",children:[],level:2},{value:"onPressDamage",id:"onpressdamage",children:[{value:"Arguments",id:"arguments",children:[],level:3}],level:2},{value:"options",id:"options",children:[{value:"background.opacity",id:"backgroundopacity",children:[],level:3},{value:"label.fontSize",id:"labelfontsize",children:[],level:3},{value:"polygons / ellipse",id:"polygons--ellipse",children:[],level:3}],level:2},{value:"width",id:"width",children:[],level:2},{value:"toImage()",id:"toimage",children:[],level:2},{value:"useProps",id:"useprops",children:[{value:"getDamages(image, damages)",id:"getdamagesimage-damages",children:[],level:3},{value:"getImage(image)",id:"getimageimage",children:[],level:3}],level:2}],g={toc:m};function d(e){var t=e.components,a=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Polygons on a vehicle picture."),"\nDamages are highlighted by the property ",(0,l.kt)("inlineCode",{parentName:"p"},"clipPath")," while the opacity of the rest of the image is reduced to localize\nthe damage on the car.\n",(0,l.kt)("a",{parentName:"p",href:"https://snack.expo.dev/@alexandre-em-monk/damagehighlight-component"},"Try it with Expo Snack.")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://img.shields.io/npm/v/@monkvision/react-native/latest.svg",alt:"npm latest package"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yarn"},"yarn add @monkvision/visualization\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { DamageHighlight } from '@monkvision/visualization';\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const image = {\n  id: "uuid", // image\'s uuid\n  width: 0, // original size of the image\n  height: 0,\n  source: {\n    uri: "https://my_image_path.monk.ai"\n  },\n};\n\nconst polygons = [[[0, 0], [1, 0], [0, 1]], [[2, 0], [1, 1], [0, 2]]];\nconst damages = [{ damageType: "Scratch", polygons, id }];\n\n<DamageHighlight image={image} damages={damages} />;\n')),(0,l.kt)("p",null,"The component's properties are from the result of an inspection. Both of them are a part of ",(0,l.kt)("inlineCode",{parentName:"p"},"inspection.images"),"."),(0,l.kt)("hr",null),(0,l.kt)("h1",{id:"props"},"Props"),(0,l.kt)("h2",{id:"image"},"image"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'PropTypes.shape({\n  height: PropTypes.number,\n  id: PropTypes.string, // image\'s uuid\n  source: PropTypes.shape({\n    uri: PropTypes.string, // "https://my_image_path.monk.ai"\n  }),\n  width: PropTypes.number, // original size of the image\n})\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const image = { id: 'uuid', width: 0, height: 0, source: {\n  uri: 'https://my_image_path.monk.ai'\n}};\n\n<DamageHighlight image={image}/>\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"image.id")," is mandatory for usage on web"),(0,l.kt)("h2",{parentName:"blockquote",id:"damages"},"damages"),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"PropTypes.arrayOf({ polygons, ellipse, damageType, id })"))),(0,l.kt)("p",null,"Contains all damages information related to the picture:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"polygons")," : Polygons are 3 levels depth matrix and come from ",(0,l.kt)("inlineCode",{parentName:"li"},"inspection.images[i].views[j].image_region.polygons"),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"list all polygons of a ",(0,l.kt)("inlineCode",{parentName:"li"},"damage")," on the current ",(0,l.kt)("inlineCode",{parentName:"li"},"image")),(0,l.kt)("li",{parentName:"ol"},"list all ",(0,l.kt)("inlineCode",{parentName:"li"},"points")," of a single ",(0,l.kt)("inlineCode",{parentName:"li"},"polygon")),(0,l.kt)("li",{parentName:"ol"},"list of 2 number which is the position of a ",(0,l.kt)("inlineCode",{parentName:"li"},"point")," in the plane (basically ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"y"),")"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"ellipse")," : Contains all information related to the ellipse",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rx"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"ry")," are the radius of the ellipse on axis ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"y")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cx"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"cy")," are the position of the center of the ellipse"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"id")," : id of the damage"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"damageType")," : type of the damage that will be display with the polygon/ellipse")),(0,l.kt)("h2",{id:"onpressdamage"},"onPressDamage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,l.kt)("p",null,"Callback that allows to add an action at the on press event on a polygon or an ellipse. And allows to have the information of the selected damage."),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"damage ",(0,l.kt)("inlineCode",{parentName:"li"},"PropTypes.shape({ damageType, ellipse, id, polygons })")," - Is the selected damage")),(0,l.kt)("h2",{id:"options"},"options"),(0,l.kt)("h3",{id:"backgroundopacity"},"background.opacity"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PropTypes.number")),(0,l.kt)("p",null,"Allow setting background image's opacity."),(0,l.kt)("h3",{id:"labelfontsize"},"label.fontSize"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PropTypes.number")),(0,l.kt)("p",null,"Allow setting the damage type label's font size."),(0,l.kt)("h3",{id:"polygons--ellipse"},"polygons / ellipse"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"ellipse: PropTypes.shape({\n  opacity: PropTypes.number,\n  stroke: PropTypes.shape({\n    color: PropTypes.string,\n    strokeWidth: PropTypes.number,\n  })\n})\n")),(0,l.kt)("p",null,"Allow to style the polygons or the ellipse"),(0,l.kt)("h2",{id:"width"},"width"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PropTypes.number")),(0,l.kt)("p",null,"Allows to set the image's displayed width. The height will be computed afterwards"),(0,l.kt)("hr",null),(0,l.kt)("h1",{id:"methods"},"Methods"),(0,l.kt)("p",null,"To use methods that ",(0,l.kt)("inlineCode",{parentName:"p"},"DamageHighlight")," exposes one has to create a component ",(0,l.kt)("inlineCode",{parentName:"p"},"ref")," and invoke them using it."),(0,l.kt)("h2",{id:"toimage"},"toImage()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,l.kt)("p",null,"It returns a Promise of the base64 image"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// ...\nconst damageHighlightRef = useRef(null);\n\nconst saveImage = useCallback(async () => {\n  const base64 = await damageHighlightRef.current.toImage();\n}, [damageHighlightRef]);\n\n// ...\n<DamageHighlight ref={damageHighlightRef} />\n")),(0,l.kt)("hr",null),(0,l.kt)("h1",{id:"hooks"},"Hooks"),(0,l.kt)("h2",{id:"useprops"},"useProps"),(0,l.kt)("p",null,"Extract properties from an API server response and convert it to fit with ",(0,l.kt)("inlineCode",{parentName:"p"},"DamageHighlight")," component props."),(0,l.kt)("h3",{id:"getdamagesimage-damages"},"getDamages(image, damages)"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,l.kt)("p",null,"Format a ",(0,l.kt)("inlineCode",{parentName:"p"},"damages")," list to DamageHighlight ",(0,l.kt)("inlineCode",{parentName:"p"},"damages")," prop (cf. ",(0,l.kt)("a",{parentName:"p",href:"#Example"},"example"),")"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"image")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#image"},"Image")),(0,l.kt)("td",{parentName:"tr",align:null},"A single inspection image object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"damages")),(0,l.kt)("td",{parentName:"tr",align:null},"[Damage]"),(0,l.kt)("td",{parentName:"tr",align:null},"List of damage from api result")))),(0,l.kt)("h3",{id:"getimageimage"},"getImage(image)"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,l.kt)("p",null,"Format an ",(0,l.kt)("inlineCode",{parentName:"p"},"image")," to a classical ",(0,l.kt)("a",{parentName:"p",href:"#image"},"image")," object (cf. ",(0,l.kt)("a",{parentName:"p",href:"#Example"},"example"),")"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"image")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#image"},"Image")),(0,l.kt)("td",{parentName:"tr",align:null},"A single inspection image object")))),(0,l.kt)("h1",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState, useEffect } from 'react';\nimport { DamageHighlight, useProps } from '@monkvision/visualization';\n\nexport default function App() {\n  const oneImage = inspection.images[0]; // result from API\n\n  const ref = useRef(null);\n  const { getDamages, getImage } = useProps();\n  const options = {\n    polygons: {\n      opacity: 0.5,\n      stroke: {\n        color: 'green',\n        strokeWidth: 50,\n      }\n    },\n    label: {\n      fontSize: 20,\n    },\n    background: {\n      opacity: 0.35,\n    },\n  }\n\n  const handleSaveImage = useCallback(async () => {\n    const base64 = await ref.current.toImage();\n    save(base64);\n  }, [ref]);\n\n  const handlePressDamage = (damage) => {\n    console.log(damage);\n  }\n\n  return (\n    <View>\n      <DamageHighlight\n        image={getImage(oneImage)}\n        damages={getDamages(oneImage, inspection.damages)}\n        options={options}\n        width={400}\n        height={180}\n        onPressDamage={console.log}\n        ref={ref}\n      />\n    </View>\n  )\n}\n\n")))}d.isMDXComponent=!0}}]);