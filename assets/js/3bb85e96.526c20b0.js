"use strict";(self.webpackChunkmonk_website=self.webpackChunkmonk_website||[]).push([[563],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),k=l,h=d["".concat(s,".").concat(k)]||d[k]||u[k]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2333:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>s,metadata:()=>p,toc:()=>c,default:()=>d});var a=n(7462),l=n(3366),o=(n(7294),n(3905)),r=["components"],i={id:"capture",title:"Capture",slug:"/js/api/components/capture"},s=void 0,p={unversionedId:"js/api/components/capture",id:"js/api/components/capture",title:"Capture",description:"Interface guiding user in a 360\xb0 vehicle capture coverage.",source:"@site/docs/js/api/components/Capture.md",sourceDirName:"js/api/components",slug:"/js/api/components/capture",permalink:"/monkjs/docs/js/api/components/capture",tags:[],version:"current",frontMatter:{id:"capture",title:"Capture",slug:"/js/api/components/capture"},sidebar:"docsSidebar",previous:{title:"Views",permalink:"/monkjs/docs/js/api/views"},next:{title:"DamageHighlight",permalink:"/monkjs/docs/js/api/components/damage-highlight"}},c=[{value:"controls",id:"controls",children:[],level:2},{value:"footer",id:"footer",children:[],level:2},{value:"fullscreen",id:"fullscreen",children:[],level:2},{value:"initialState",id:"initialstate",children:[],level:2},{value:"inspectionId",id:"inspectionid",children:[],level:2},{value:"loading",id:"loading",children:[],level:2},{value:"navigationOptions",id:"navigationoptions",children:[{value:"allowNavigate",id:"allownavigate",children:[],level:3},{value:"allowRetake",id:"allowretake",children:[],level:3},{value:"allowSkip",id:"allowskip",children:[],level:3},{value:"retakeMaxTry",id:"retakemaxtry",children:[],level:3},{value:"retakeMinTry",id:"retakemintry",children:[],level:3}],level:2},{value:"onChange",id:"onchange",children:[],level:2},{value:"onReady",id:"onready",children:[],level:2},{value:"primaryColor",id:"primarycolor",children:[],level:2},{value:"sightIds",id:"sightids",children:[],level:2},{value:"state",id:"state",children:[{value:"settings",id:"settings",children:[],level:3},{value:"sights",id:"sights",children:[],level:3},{value:"uploads",id:"uploads",children:[],level:3}],level:2},{value:"api",id:"api",children:[{value:"camera",id:"camera",children:[],level:3},{value:"goPrevSight",id:"goprevsight",children:[],level:3},{value:"goNextSight",id:"gonextsight",children:[],level:3},{value:"startUploadAsync",id:"startuploadasync",children:[],level:3},{value:"takePictureAsync",id:"takepictureasync",children:[],level:3}],level:2},{value:"controlsContainerStyle",id:"controlscontainerstyle",children:[],level:2},{value:"sightsContainerStyle",id:"sightscontainerstyle",children:[],level:2},{value:"thumbnailStyle",id:"thumbnailstyle",children:[],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,l.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Interface guiding user in a 360\xb0 vehicle capture coverage.")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://img.shields.io/npm/v/@monkvision/camera/latest.svg",alt:"npm latest package"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yarn"},"yarn add @monkvision/camera\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Capture } from '@monkvision/camera';\n")),(0,o.kt)("p",null,"Here an example to upload one image to an inspection on the browser with the task ",(0,o.kt)("inlineCode",{parentName:"p"},"damage_detection")," set."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, { useCallback, useState } from 'react';\nimport { Capture, Controls } from '@monkvision/camera';\nimport { SafeAreaView, StatusBar } from 'react-native';\n\nexport default function Inspector({ inspectionId }) {\n  const [loading, setLoading] = useState();\n\n  const handleCapture = useCallback(async (state, api, event) => {\n    event.preventDefault();\n    const { takePictureAsync, startUploadAsync, goNextSight } = api;\n\n    setTimeout(async () => {\n      setLoading(true);\n      const { picture } = await takePictureAsync();\n      console.log('Picture has been taken!')\n      setLoading(false);\n\n      goNextSight();\n\n      const uploadResult = await startUploadAsync(picture);\n      console.log('Upload has succeed!')\n    }, 150);\n  }, []);\n\n  const controls = [{\n    disabled: loading,\n    onPress: handleCapture,\n    ...Controls.CaptureButtonProps,\n  }];\n\n  return (\n    <SafeAreaView>\n      <StatusBar hidden />\n      <Capture\n        inspectionId={inspectionId}\n        controls={controls}\n        loading={loading}\n      />\n    </SafeAreaView>\n  );\n}\n")),(0,o.kt)("h1",{id:"props"},"Props"),(0,o.kt)("h2",{id:"controls"},"controls"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.arrayOf(PropTypes.shape({ component: PropTypes.element, disabled: PropTypes.bool, onPress: PropTypes.func }))")),(0,o.kt)("p",null,"An array of props inherited from ",(0,o.kt)("inlineCode",{parentName:"p"},"TouchableOpacity|*")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const controls = [{\n  disabled: loading,\n  onPress: handleCapture,\n  ...Controls.CaptureButtonProps,\n}];\n")),(0,o.kt)("h2",{id:"footer"},"footer"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.element")),(0,o.kt)("p",null,"A rendered element to be display has footer of the Sights scroll list"),(0,o.kt)("h2",{id:"fullscreen"},"fullscreen"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.objectOf(PropTypes.any)")),(0,o.kt)("p",null,"Props inherited from ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")),(0,o.kt)("h2",{id:"initialstate"},"initialState"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.state")),(0,o.kt)("p",null,"InitialState to begin with. Very useful if you persist the state\non each change from ",(0,o.kt)("a",{parentName:"p",href:"#onchange"},(0,o.kt)("inlineCode",{parentName:"a"},"onChange"))," callback.\nSee the ",(0,o.kt)("a",{parentName:"p",href:"#state"},(0,o.kt)("inlineCode",{parentName:"a"},"state"))," section for more details."),(0,o.kt)("h2",{id:"inspectionid"},"inspectionId"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.string")),(0,o.kt)("p",null,"ID of an inspection if you want to use component's API like ",(0,o.kt)("a",{parentName:"p",href:"#startuploadasync"},(0,o.kt)("inlineCode",{parentName:"a"},"startUploadAsync")),"."),(0,o.kt)("h2",{id:"loading"},"loading"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.bool")),(0,o.kt)("p",null,"A boolean showing an ActivityIndicator and disabling controls if true"),(0,o.kt)("h2",{id:"navigationoptions"},"navigationOptions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"PropTypes.shape({\n  allowNavigate: PropTypes.bool,\n  allowRetake: PropTypes.bool,\n  allowSkip: PropTypes.bool,\n  retakeMaxTry: PropTypes.number,\n  retakeMinTry: PropTypes.number,\n})\n")),(0,o.kt)("h3",{id:"allownavigate"},"allowNavigate"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.bool")),(0,o.kt)("p",null,"A boolean allowing user to navigate between sight. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("h3",{id:"allowretake"},"allowRetake"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.bool")),(0,o.kt)("p",null,"A boolean allowing user to retake a picture if not compliant. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("h3",{id:"allowskip"},"allowSkip"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.bool")),(0,o.kt)("p",null,"A boolean allowing user to skip a sight if he is not capable of taking it. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("h3",{id:"retakemaxtry"},"retakeMaxTry"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.number")),(0,o.kt)("p",null,"A number setting the max limit of retake trys. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,o.kt)("h3",{id:"retakemintry"},"retakeMinTry"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.number")),(0,o.kt)("p",null,"A number setting the min limit of retake trys. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Current scenario is user has to retake at least 1 (",(0,o.kt)("inlineCode",{parentName:"p"},"retakeMinTry"),") picture,\nbut can retake only 1 (",(0,o.kt)("inlineCode",{parentName:"p"},"retakeMaxTry"),") before being redirected to the next stage,\nonly if picture is not compliant to ",(0,o.kt)("inlineCode",{parentName:"p"},"Image Quality Check")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Car 360\xb0 coverage"),".")),(0,o.kt)("h2",{id:"onchange"},"onChange"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,"Will call a function when Component state has changed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const handleChange = (state, api) => console.log(state);\n")),(0,o.kt)("h2",{id:"onready"},"onReady"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,"Will call a function when Component camera is ready to be used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const handleReady = (state, api) => console.log(state);\n")),(0,o.kt)("h2",{id:"primarycolor"},"primaryColor"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.string")),(0,o.kt)("p",null,"Custom color for better user experience (default is white)"),(0,o.kt)("h2",{id:"sightids"},"sightIds"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.arrayOf(PropTypes.string)")),(0,o.kt)("p",null,"List of sights in order you want theme to be displayed.\nSee ",(0,o.kt)("a",{parentName:"p",href:"/monkjs/sights"},"monkjs/sights")," to choose sights you want."),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"state-and-methods"},"State and Methods"),(0,o.kt)("h2",{id:"state"},"state"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"console.log(state); // { isReady, settings, sights, uploads };\n")),(0,o.kt)("h3",{id:"settings"},"settings"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://docs.expo.dev/versions/latest/sdk/camera/#props"},"Expo Camera Props")),(0,o.kt)("h3",{id:"sights"},"sights"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const sights = useSights(sightIds);\nconsole.log(sights); // { state, distpatch }\nconsole.log(sights.state); // {current: { id, index, metadata }, ids, remainingPictures, takenPictures, tour }\n")),(0,o.kt)("h3",{id:"uploads"},"uploads"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const uploads = useSights(sightIds);\nconsole.log(uploads); // { state, distpatch }\nconsole.log(uploads.state); // { sightId: { picture: null, status: 'idle', error: null, uploadCount: 0 } }\n")),(0,o.kt)("h2",{id:"api"},"api"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"console.log(API); // { camera, goPrevSight, goNextSight, startUploadAsync, takePictureAsync };\n")),(0,o.kt)("h3",{id:"camera"},"camera"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://docs.expo.dev/versions/latest/sdk/camera/"},"Expo Camera API")),(0,o.kt)("h3",{id:"goprevsight"},"goPrevSight"),(0,o.kt)("p",null,"Dispatch action to return to the previous Sight in the ",(0,o.kt)("inlineCode",{parentName:"p"},"sightIds")," prop order"),(0,o.kt)("h3",{id:"gonextsight"},"goNextSight"),(0,o.kt)("p",null,"Dispatch action to go to the next Sight in the ",(0,o.kt)("inlineCode",{parentName:"p"},"sightIds")," prop order"),(0,o.kt)("h3",{id:"startuploadasync"},"startUploadAsync"),(0,o.kt)("p",null,"Call a promise starting to upload a picture to Monk API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const uploadResult = await startUploadAsync(picture);\nconsole.log('Upload has succeed!')\n")),(0,o.kt)("h3",{id:"takepictureasync"},"takePictureAsync"),(0,o.kt)("p",null,"Call a promise starting to take a picture from the Native or browser camera"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"setLoading(true);\nconst { picture } = await takePictureAsync();\nconsole.log('Picture has been taken!')\nsetLoading(false);\n\n// Don't set Loading to true if you want Async uploads\nconst uploadResult = await startUploadAsync(picture);\nconsole.log('Upload has succeed!')\n")),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"style"},"Style"),(0,o.kt)("h2",{id:"controlscontainerstyle"},"controlsContainerStyle"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.style")),(0,o.kt)("p",null,"Style of the control's container (layout side right)."),(0,o.kt)("h2",{id:"sightscontainerstyle"},"sightsContainerStyle"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.style")),(0,o.kt)("p",null,"Style of the sight's scroll list container (layout side left)."),(0,o.kt)("h2",{id:"thumbnailstyle"},"thumbnailStyle"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.style")),(0,o.kt)("p",null,"Style of a thumbnail in a sights list."))}d.isMDXComponent=!0}}]);