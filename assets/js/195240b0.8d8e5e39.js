"use strict";(self.webpackChunkmonk_website=self.webpackChunkmonk_website||[]).push([[269],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(t),u=o,g=d["".concat(p,".").concat(u)]||d[u]||c[u]||r;return t?a.createElement(g,i(i({ref:n},m),{},{components:t})):a.createElement(g,i({ref:n},m))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8422:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>l,contentTitle:()=>p,metadata:()=>s,toc:()=>m,default:()=>d});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),i=["components"],l={id:"damage-annotation",title:"DamageAnnotation",slug:"/js/api/components/damage-annotation"},p=void 0,s={unversionedId:"js/api/components/damage-annotation",id:"js/api/components/damage-annotation",isDocsHomePage:!1,title:"DamageAnnotation",description:"DamageAnnotation allows the user to highlight a damage manually with an ellipse. Then he can manipulate this ellipse",source:"@site/docs/js/api/components/DamageAnnotation.md",sourceDirName:"js/api/components",slug:"/js/api/components/damage-annotation",permalink:"/monkjs/docs/js/api/components/damage-annotation",tags:[],version:"current",frontMatter:{id:"damage-annotation",title:"DamageAnnotation",slug:"/js/api/components/damage-annotation"},sidebar:"docsSidebar",previous:{title:"DamageHighlight",permalink:"/monkjs/docs/js/api/components/damage-highlight"},next:{title:"DamageLibrary",permalink:"/monkjs/docs/js/api/components/damage-library"}},m=[],c={toc:m};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DamageAnnotation")," allows the user to highlight a damage manually with an ellipse. Then he can manipulate this ellipse\nby moving and resizing it to match a damage.\n",(0,r.kt)("a",{parentName:"p",href:"https://snack.expo.dev/@alexandre-em-monk/damageannotation-component"},"Try it with Expo Snack.")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/npm/v/@monkvision/react-native/latest.svg",alt:"npm latest package"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yarn"},"yarn add @monkvision/react-native\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { DamageAnnotation } from '@monkvision/react-native';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Usage example\nconst image = {\n  id: "uuid", // image\'s uuid\n  width: 0, // original size of the image\n  height: 0,\n  source: {\n    uri: "https://my_image_path.monk.ai"\n  },\n};\n\nconst handleAdd = (ellipse) => {\n  console.log(ellipse);\n}\n\nconst handleRemove = (ellipse) => {\n  console.log(ellipse);\n}\n\nconst handleValidate = (ellipse) => {\n  addViewDamage(inspectionId, damageId, image, ellipse);\n}\n\n<DamageAnnotation\n  image={image}\n  onAdd={handleAdd}\n  onRemove={handleRemove}\n  onValidate={handleValidate}\n/>;\n')),(0,r.kt)("p",null,"The property ",(0,r.kt)("inlineCode",{parentName:"p"},"image")," comes from the result of an inspection, which is formatted with the\nhooks ",(0,r.kt)("a",{parentName:"p",href:"https://monkvision.github.io/monkjs/docs/js/api/components/damage-highlight#usepolygons"},(0,r.kt)("inlineCode",{parentName:"a"},"usePolygon")),"."),(0,r.kt)("p",null,"The argument ",(0,r.kt)("inlineCode",{parentName:"p"},"ellipse")," of each callback has the following format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Ellipse format\nEllipse.propTypes = {\n  cx: PropTypes.number, // Position of the center\n  cy: PropTypes.number,\n  rx: PropTypes.number, // Radius of the ellipse on `x` axis\n  ry: PropTypes.number, // Radius of the ellipse on `y` axis\n};\n")),(0,r.kt)("p",null,"And can be used to compute the ",(0,r.kt)("inlineCode",{parentName:"p"},"bounding_box")," needed to generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," on the Monk API."))}d.isMDXComponent=!0}}]);