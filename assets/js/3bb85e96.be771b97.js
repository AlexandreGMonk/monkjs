"use strict";(self.webpackChunkmonk_website=self.webpackChunkmonk_website||[]).push([[563],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),s=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,g=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return t?a.createElement(g,p(p({ref:n},u),{},{components:t})):a.createElement(g,p({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,p=new Array(o);p[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,p[1]=l;for(var s=2;s<o;s++)p[s]=t[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},607:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>l,contentTitle:()=>i,metadata:()=>s,toc:()=>u,default:()=>d});var a=t(3117),r=t(102),o=(t(7294),t(3905)),p=["components"],l={id:"capture",title:"Capture",slug:"/js/api/components/capture"},i=void 0,s={unversionedId:"js/api/components/capture",id:"js/api/components/capture",isDocsHomePage:!1,title:"Capture",description:"Interface guiding user in a 360 vehicle capture process.",source:"@site/docs/js/api/components/Capture.md",sourceDirName:"js/api/components",slug:"/js/api/components/capture",permalink:"/monkjs/docs/js/api/components/capture",tags:[],version:"current",frontMatter:{id:"capture",title:"Capture",slug:"/js/api/components/capture"},sidebar:"docsSidebar",previous:{title:"Views",permalink:"/monkjs/docs/js/api/views"},next:{title:"DamageHighlight",permalink:"/monkjs/docs/js/api/components/damage-highlight"}},u=[{value:"buttonCaptureProps",id:"buttoncaptureprops",children:[]},{value:"buttonFullScreenProps <code>web only</code>",id:"buttonfullscreenprops-web-only",children:[]},{value:"buttonResetProps",id:"buttonresetprops",children:[]},{value:"buttonSettingsProps",id:"buttonsettingsprops",children:[]},{value:"buttonValidateProps",id:"buttonvalidateprops",children:[]},{value:"onCapture",id:"oncapture",children:[]},{value:"onChange",id:"onchange",children:[]},{value:"onOffline",id:"onoffline",children:[]},{value:"onReset",id:"onreset",children:[]},{value:"onSettings",id:"onsettings",children:[]},{value:"onValidate",id:"onvalidate",children:[]},{value:"sightIds",id:"sightids",children:[]}],c={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,p);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Interface guiding user in a 360 vehicle capture process.")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://img.shields.io/npm/v/@monkvision/react-native-views/latest.svg",alt:"npm latest package"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yarn"},"yarn add @monkvision/camera\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Capture } from '@monkvision/camera';\n")),(0,o.kt)("p",null,"Here an example to upload one image to an inspection with the task ",(0,o.kt)("inlineCode",{parentName:"p"},"damage_detection")," set."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, { useCallback } from 'react';\nimport { Platform } from 'react-native';\nimport { Capture } from '@monkvision/camera';\nimport { monkApi } from '@monkvision/corejs';\n\nfunction Inspector({ inspectionId }) {\n  const handleCapture = useCallback(async (payload) => {\n    const { id, label } = payload.metadata;\n    const { uri } = payload.picture;\n\n    try {\n      const filename = `${id}-${inspectionId}.jpg`;\n      const multiPartKeys = { image: 'image', json: 'json', filename, type: 'image/jpg' };\n\n      const acquisition = { strategy: 'upload_multipart_form_keys', file_key: multiPartKeys.image };\n      const json = JSON.stringify({ acquisition, tasks: ['damage_detection'] });\n\n      const data = new FormData();\n      data.append(multiPartKeys.json, json);\n\n      if (Platform.OS === 'web') {\n        const blobUri = await fetch(uri);\n        const blob = await blobUri.blob();\n        const file = await new File(\n          [blob],\n          multiPartKeys.filename,\n          { type: multiPartKeys.type },\n        );\n        data.append(multiPartKeys.image, file);\n      } else {\n        // Transform URI into Native File\n      }\n\n      await monkApi.images.addOne({ inspectionId, data });\n\n      console.log(`${label} picture was uploaded!`);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [inspectionId]);\n\n\n  return <Capture onCapture={handleCapture} />;\n}\n")),(0,o.kt)("h2",{id:"buttoncaptureprops"},"buttonCaptureProps"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.objectOf(PropTypes.any)")),(0,o.kt)("p",null,"Props given to the Capture button."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const buttonCaptureProps = { disabled: true };\n\n<CaptureTour buttonCaptureProps={buttonCaptureProps}/>\n")),(0,o.kt)("h2",{id:"buttonfullscreenprops-web-only"},"buttonFullScreenProps ",(0,o.kt)("inlineCode",{parentName:"h2"},"web only")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.objectOf(PropTypes.any)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const buttonFullScreenProps = { hidden: true };\n\n<CaptureTour buttonFullScreenProps={buttonFullScreenProps}/>\n")),(0,o.kt)("h2",{id:"buttonresetprops"},"buttonResetProps"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.objectOf(PropTypes.any)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const buttonResetProps = { hidden: true };\n\n<CaptureTour buttonResetProps={buttonResetProps}/>\n")),(0,o.kt)("h2",{id:"buttonsettingsprops"},"buttonSettingsProps"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.objectOf(PropTypes.any)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const buttonSettingsProps = { hidden: true };\n\n<CaptureTour buttonSettingsProps={buttonSettingsProps}/>\n")),(0,o.kt)("h2",{id:"buttonvalidateprops"},"buttonValidateProps"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.objectOf(PropTypes.any)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const buttonValidateProps = { hidden: true };\n\n<CaptureTour buttonValidateProps={buttonValidateProps}/>\n")),(0,o.kt)("h2",{id:"oncapture"},"onCapture"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,"Will call a function when the camera has taken a picture. You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"@monkvision/corejs")," API to upload the picture to an inspection for example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleCapture = (payload) => console.log(payload);\n\n<CaptureTour onTakePicture={handleCapture}/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const payload = {\n  picture: { uri },\n  camera, // https://docs.expo.dev/versions/latest/sdk/camera/\n  sights: {\n    current: {\n      id,\n      metadata,\n    },\n  },\n};\n")),(0,o.kt)("h2",{id:"onchange"},"onChange"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,"Will call a function when Component state has changed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleChange = (state) => console.log(state);\n\n<CaptureTour onChange={handleChange}/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const state = {\n  sights: {\n    current: {\n      id,\n      index,\n      metadata,\n    },\n    ids,\n    remainingPictures,\n    takenPictures,\n    tour,\n  },\n  settings: {\n    ratio: '4:3',\n    zoom\n  }\n};\n")),(0,o.kt)("h2",{id:"onoffline"},"onOffline"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,'Will call a function when the user press on the "Reset" button control.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleOffline = (offline) => console.log(offline ? 'offline' : 'online');\n\n<CaptureTour onOffline={handleOffline}/>\n")),(0,o.kt)("h2",{id:"onreset"},"onReset"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,'Will call a function when the user press on the "Reset" button control.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleReset = () => console.log('Reset');\n\n<CaptureTour onValidate={handleReset}/>\n")),(0,o.kt)("h2",{id:"onsettings"},"onSettings"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,'Will call a function when the user press on the "Settings" button control.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleSettings = () => console.log('Settings');\n\n<CaptureTour onSettings={handleSettings}/>\n")),(0,o.kt)("h2",{id:"onvalidate"},"onValidate"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,'Will call a function when the user press on the "Validate" button control.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleValidate = () => console.log('Validate');\n\n<CaptureTour onValidate={handleValidate}/>\n")),(0,o.kt)("h2",{id:"sightids"},"sightIds"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.arrayOf(PropTypes.string)")))}d.isMDXComponent=!0}}]);