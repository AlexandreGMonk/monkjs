"use strict";(self.webpackChunkmonk_website=self.webpackChunkmonk_website||[]).push([[301],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7728:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>c,metadata:()=>l,toc:()=>p,default:()=>d});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],s={id:"capture-tour",title:"CaptureTour",slug:"/js/api/components/capture-tour"},c=void 0,l={unversionedId:"js/api/components/capture-tour",id:"js/api/components/capture-tour",isDocsHomePage:!1,title:"CaptureTour",description:"Interface guiding user in a 360 vehicle capture process.",source:"@site/docs/js/api/components/CaptureTour.md",sourceDirName:"js/api/components",slug:"/js/api/components/capture-tour",permalink:"/monkjs/docs/js/api/components/capture-tour",tags:[],version:"current",frontMatter:{id:"capture-tour",title:"CaptureTour",slug:"/js/api/components/capture-tour"},sidebar:"docsSidebar",previous:{title:"CaptureDamage",permalink:"/monkjs/docs/js/api/components/capture-damage"},next:{title:"DamageHighlight",permalink:"/monkjs/docs/js/api/components/damage-highlight"}},p=[{value:"initialPicturesState",id:"initialpicturesstate",children:[]},{value:"isLoading",id:"isloading",children:[]},{value:"onCloseCamera",id:"onclosecamera",children:[]},{value:"onRefreshUpload",id:"onrefreshupload",children:[]},{value:"onSettings",id:"onsettings",children:[]},{value:"onSuccess",id:"onsuccess",children:[]},{value:"onTakePicture",id:"ontakepicture",children:[]},{value:"sightIdsNotUploaded",id:"sightidsnotuploaded",children:[]},{value:"sights",id:"sights",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Interface guiding user in a 360 vehicle capture process.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { CaptureTour } from '@monkvision/react-native-views'; // or CameraView\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The component was previously called CameraView. You can still import it with the same name.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleSuccess = ({ pictures, camera, sights }) => {\n  console.log(pictures); // [{ name, Sight, Source }, ...]\n};\n\nconst handleTakePicture = (picture) => {\n  console.log(picture); // { name, Sight, Source }\n};\n\nreturn (\n  <CaptureTour\n    onSuccess={handleSuccess}\n    onTakePicture={handleTakePicture}\n  />\n);\n")),(0,o.kt)("h2",{id:"initialpicturesstate"},"initialPicturesState"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"propTypes.cameraPictures")),(0,o.kt)("p",null,"An array or object containing pictures like the ",(0,o.kt)("inlineCode",{parentName:"p"},"pictures")," prop returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"onSuccess")," callback. Useful if you want to persist the state of the tour and go back later. The component will count pictures and go to the active sight of ",(0,o.kt)("inlineCode",{parentName:"p"},"pictures.length - 1")," index."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const cameraPicture = shape({ name, sight, source });\nconst cameraPictures = oneOfType([arrayOf(cameraPicture), objectOf(cameraPicture)]);\n\nconst initialPicturesState = {};\n\n<CaptureTour initialPicturesState={initialPicturesState}/>\n")),(0,o.kt)("h2",{id:"isloading"},"isLoading"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.bool")),(0,o.kt)("p",null,"Will display an ",(0,o.kt)("inlineCode",{parentName:"p"},"ActivityIndicator")," view. Use it when you are uploading a picture for example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const isLoading = false;\n\n<CaptureTour isLoading={isLoading}/>\n")),(0,o.kt)("h2",{id:"onclosecamera"},"onCloseCamera"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,'Will call a function when the user press on the "Close" control.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleCloseCamera = console.warn('Are you sure ?');\n\n<CaptureTour onCloseCamera={handleCloseCamera}/>\n")),(0,o.kt)("h2",{id:"onrefreshupload"},"onRefreshUpload"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,'Will call a function when the user press on the "Re upload" control. This control is displayed only when ',(0,o.kt)("inlineCode",{parentName:"p"},"sightIdsNotUploaded")," is not empty."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleRefreshUpload = useCallback(() => {\n  state.picturesNotUploaded.forEach((picture) => {\n    handleTakePicture(\n      Platform.OS === 'web'\n        ? picture.source.base64\n        : picture.source.uri,\n      inspectionId,\n    );\n  });\n}, [handleTakePicture, inspectionId, screen]);\n\n\n<CaptureTour onRefreshUpload={handleRefreshUpload}/>\n")),(0,o.kt)("h2",{id:"onsettings"},"onSettings"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,'Will call a function when the user press on the "Settings" control.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleSettings = () => console.log('Open settings menu');\n\n<CaptureTour onSettings={handleSettings}/>\n")),(0,o.kt)("h2",{id:"onsuccess"},"onSuccess"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,"Will call a function when the user has ended on the tour. You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"@monkvision/corejs")," API to start a damage inspection for example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleSuccess = ({ pictures, camera, sights }) => console.log(pictures);\n\n// pictures: [{\n//   name: 'abstractFront',\n//   sight: Sight,\n//   source: { uri, base64 },\n// }, ...]\n\n<CaptureTour onSuccess={handleSuccess}/>\n")),(0,o.kt)("h2",{id:"ontakepicture"},"onTakePicture"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.func")),(0,o.kt)("p",null,"Will call a function when the camera has taken a picture. You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"@monkvision/corejs")," API to upload the picture to an inspection for example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const handleTakePicture = (picture) => console.log(picture);\n\n// picture: {\n//   name: 'abstractFront',\n//   sight: Sight,\n//   source: { uri, base64 },\n// }\n\n<CaptureTour onTakePicture={handleTakePicture}/>\n")),(0,o.kt)("h2",{id:"sightidsnotuploaded"},"sightIdsNotUploaded"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PropTypes.arrayof(PropTypes.string)")),(0,o.kt)("p",null,"List of picture names or ids that have failed to upload. If not empty, it will display a refresh button to use with the ",(0,o.kt)("inlineCode",{parentName:"p"},"onRefreshUpload")," callback."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const sightIdsNotUploaded = [\n  'abstractFront',\n  'abstractFrontRight',\n];\n\n<CaptureTour sightIdsNotUploaded={sightIdsNotUploaded}/>\n")),(0,o.kt)("h2",{id:"sights"},"sights"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"propTypes.sights")),(0,o.kt)("p",null,"List of sights. Sights are metadata for picture to enhance AI capabilities. We recommended letting this prop by default to experience the common Monk workflow (16 pictures, exterior and interior)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Sight, values } from '@monkvision/corejs';\n\nconst sights = Object.values(values.sights.abstract)\n  .map((s) => new Sight(...s));\n\n<CaptureTour sights={sights}/>\n")))}d.isMDXComponent=!0}}]);